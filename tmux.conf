
#!/bin/bash
#--------------------------------------------------------------------------------
# .tmux.conf
# last reviewed: July 7, 2023
#
#--------------------------------------------------------------------------------
# üîñ About key bindings
# bind-key or bind
# option -n skip the tmux escape (sets key table at root instead of prefix)
# option -r allow repeated use with escaping every time
#
# bind and bind-key are the same
# set and set-option are the same
#
# Use list-keys to echo the loaded bindings
#--------------------------------------------------------------------------------

# prefix key to ctrl+s
unbind C-b
set -g prefix C-s

# send the prefix to client inside window (ala nested sessions)
bind -r C-s send-prefix

# shell
# set -g default-command /opt/homebrew/bin/fish
# set -g default-shell /opt/homebrew/bin/fish

# $TERM
# set -g default-terminal "alacritty"

# Custom develop window
# depends on fish shell function develop
# bind -r l run-shell "develop"

# Name the window when being created
bind C new-window \; command-prompt -p "Name for this new window: " "rename-window '%%'"

# don't rename windows automatically
set -g allow-rename off

# Alter the window sequence
# Window sequence: send the current window to the end of the window list
# escape + <Shift> left or right arrow key
bind T swap-window -t 0
bind S-Left       swap-window -t -1
bind S-Right      swap-window -t +1
bind -n C-S-Left  swap-window -t -1
bind -n C-S-Right swap-window -t +1

# Scrollback size
set -g history-limit 100000

# disable wait after escape, so vim is usable
# see fishshell issue: 5894
set-option -sg escape-time 50

# {n}vim compatability
set -sa terminal-overrides ',alacritty:RGB'
set -as terminal-overrides ",*:U8=0"

# Show times longer than supposed
set -g display-panes-time 2000

# tmux messages are displayed for 4 seconds
set -g display-time 4000

## Split window into panes
bind-key '/' split-window -h -c '#{pane_current_path}'
bind-key '-' split-window -v -c '#{pane_current_path}'

# If running inside tmux ($TMUX is set), then change the status line to red
%if #{TMUX}
set -g status-bg red
%endif

# No bells at all
set -g bell-action none

# Enable the mouse
set -g mouse on

# ------------------------------------------------------------------------------
# Bindings that need to coordinate with {n}vim
# pass keys onto to {n}vim when is_vim
# ------------------------------------------------------------------------------
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# ------------------------------------------------------------------------------
# ü™üPane navigation C-jkhl without prefix
# ------------------------------------------------------------------------------
bind -n C-j     if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k     if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-h     if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-l     if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# ------------------------------------------------------------------------------
# ü™üPane resizing Alt-jkhl (aka Option, Meta)
# ------------------------------------------------------------------------------
# -- ü¶Ä fails in alacritty
bind -n M-j     if-shell "$is_vim" "send-keys M-j" "resize-pane -D 1"
bind -n M-k     if-shell "$is_vim" "send-keys M-k" "resize-pane -U 1"
bind -n M-h     if-shell "$is_vim" "send-keys M-h" "resize-pane -L 2"
bind -n M-l     if-shell "$is_vim" "send-keys M-l" "resize-pane -R 2"
# -- compatible with alacritty
bind -n M-J     if-shell "$is_vim" "send-keys M-j" "resize-pane -D 1"
bind -n M-K     if-shell "$is_vim" "send-keys M-k" "resize-pane -U 1"
bind -n M-H     if-shell "$is_vim" "send-keys M-h" "resize-pane -L 2"
bind -n M-L     if-shell "$is_vim" "send-keys M-l" "resize-pane -R 2"
# -- Arrows with larger bumps
bind -n M-Down  if-shell "$is_vim" "send-keys M-j" "resize-pane -D 10"
bind -n M-Up    if-shell "$is_vim" "send-keys M-k" "resize-pane -U 10"
bind -n M-Left  if-shell "$is_vim" "send-keys M-h" "resize-pane -L 20"
bind -n M-Right if-shell "$is_vim" "send-keys M-l" "resize-pane -R 20"

bind r rotate-window

# bind-key "c" new-window -c
#bind-key b break-pane -d
#bind-key C-j choose-tree
#bind K kill-session

# kill current pane/window
bind q confirm-before kill-pane
bind Q confirm-before kill-window

# Status Bar
# ====================
set-option -g status on

# control/toggle use of status bar
bind-key q set-option status

set -g status-interval 1
set -g status-justify left
set -g status-bg default
set -g status-fg white
set -g status-left ''
set -g status-right-length 90

# Desktop vs Portable (commands sent to the shell)
if-shell '[[ "$BATTERY_ENABLED" ]]' {
   set -g status-right "#W | #{battery_icon} #{battery_percentage} | %I:%M %p - %a, %h %d "
} {
   set -g status-right "#W | %I:%M %p - %a, %h %d "
}

# clock
# set-window-option -g clock-mode-colour colour64 #green
# --------------
# END status bar

# Tmux ability to influence window size of apps running in pane
setw -g aggressive-resize on

## Relaod the config file manually
unbind O
bind O source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# TESTING
# set -g @shell_mode 'vi'
# Vi copypaste mode
# setw -g mode-keys vi

# TESTING
# setw -g xterm-keys on

# Messages
set -g message-style 'fg=#1a1a1a, bg=#f0db4f'
set -g message-command-style 'fg=#52a5b8, bg=#1a1a1a'

# Status bar
set -g status-style 'bg=default, fg=white'

# Highlighting the active window in status bar
setw -g window-status-format         '#[fg=white] ‚óè'
setw -g window-status-current-format '#[fg=#00a5b8] ‚óè'

# Window colors: inactive | active
set -g window-style             'fg=#a0a0a0, bg=#1a1a1a'
set -g window-active-style      'fg=#cccccc, bg=#191919'

# Pane borders: inactive | active
set -g pane-border-style        'fg=#696969, bg=#000000'
set -g pane-active-border-style 'fg=#52a5b8, bg=#000000'

# Capture when a window comes in and out of focus ü¶Ä?
set -g focus-events on

# Plugin manager and plugins for Tmux
# Run <prefix> + S-I to install plugins
# =====================================
set -g @plugin 'tmux-plugins/tpm'

# Plugins
# continuous saving and restores tmux sessions
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-continuum'

# save sessions: location and frequency
set -g @resurrect-dir '$HOME/tmp/tmux/sessions'
set -g @continuum-save-interval '60'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
# ... include neovim sessions & pane contents
set -g @resurrect-strategy-nvim 'session'
# set -g @resurrect-capture-pane-contents 'on'

# copy to sytem clipboard
set -g @plugin 'tmux-plugins/tmux-yank'

# other tmux settings that are "sensible"
# set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-battery'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager
# Keep this line at the very bottom of tmux.conf
# üîñ This is a bash script the preferred shell (e.g., fish or zsh)
# needs to pass on set the env in the event it does not get it elsewhere
set-environment -g PATH "/opt/homebrew/bin:/usr/local/bin:/bin:/usr/bin"

run "$HOME/.tmux/plugins/tpm/tpm"
