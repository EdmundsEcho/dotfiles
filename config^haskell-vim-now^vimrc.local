"-------------------------
" .vimrc
" ~/.config/haskell-vim-now/vimrc.local
" This file extends the configuration provided by
" the haskell config file (a package that I enjoy
" immensely)
"-------------------------

syntax on
filetype plugin indent on

" ------------------
" Tweaks to defaults
" ------------------
" esc key with cursor moved forward
imap df <esc>l
" Remap front of the line
nmap 0 ^
" G that goes to the end of the line
nmap G G$
" save and send :r to ghci
command! Wr w | :VtrSendCommandToRunner :r
" save file from normal, insert and visual using <ctr-a>
nnoremap <c-a> :W<CR>
inoremap <c-a> <Esc>:w<CR>l
vnoremap <c-a> <Esc>:W<CR>

" Leader key to access my own settings
" ... the preferred way to customize vim
" with a wide range of key mappings
let mapleader = "\<SPACE>"

" Split edit your vimrc. Type space forc in sequence to trigger
" This creates a new window for the vimrc
nmap <leader>forc :sp ${HOME}/.config/haskell-vim-now/vimrc.local<CR>

" Leader key bindings
" Source (reload) your vimrc. Type space fsrc in sequence to trigger
nmap <leader>fsrc :source $MYVIMRC<CR>

" Map esc to remove highlighting of previous search
nnoremap <esc> :noh<return><esc>

" Navigating between buffers
nmap <leader>bn :bn<CR>
nmap <leader>bp :bp<CR>
nmap <leader>bd :bd<CR>
" alternative to moving through buffers
" does not seem to work...
"nmap <S-Right> :bn<CR>
"nmap <S-Left> :bp<CR>

" Split window nnoremap <leader>- :sp<CR>
nnoremap <leader>\ :vsp<CR>

" Change the size: height
call submode#enter_with('grow/shrink', 'n', '', '<leader>j', '<C-w>+')
call submode#enter_with('grow/shrink', 'n', '', '<leader>k', '<C-w>-')
call submode#map('grow/shrink', 'n', '', 'j', '<C-w>+')
call submode#map('grow/shrink', 'n', '', 'k', '<C-w>-')
" Change the size: width
call submode#enter_with('grow/shrink', 'n', '', '<leader>h', '<C-w><')
call submode#enter_with('grow/shrink', 'n', '', '<leader>l', '<C-w>>')
call submode#map('grow/shrink', 'n', '', 'h', '<C-w><')
call submode#map('grow/shrink', 'n', '', 'l', '<C-w>>')
"disable submode timeouts:
let g:submode_timeout = 800
" don't consume submode-leaving key
let g:submode_keep_leaving_key = 1

" Rebalance Tmux when call a split
autocmd VimResized * :wincmd =
" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>z :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>Z :wincmd =<cr><Paste>

" Sending commands to Tmux
nnoremap <leader>ro :VtrOpenRunner {'orientation': 'h', 'percentage': 50}<cr>
nnoremap <leader>rg :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'stack\ ghci'}<cr>
let g:rspec_command = "call VtrSendCommand('rspec {spec}')"

" Working with Sessions vim-sessions
nnoremap <leader>so :OpenSession
nnoremap <leader>ss :SaveSession
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" Using vim-slime for sending text to tmux (like vim-sessions)
let g:slime_target = "tmux"

" Default saving of sessions
let g:session_autosave = 'no'

set number                      " Display line numbers beside buffer
set nocompatible                " Don't maintain compatibilty with Vi
set hidden                      " Allow buffer change w/o saving
set lazyredraw                  " Don't update while executing macros
set backspace=indent,eol,start  " Sane backspace behavior
set history=1000                " Remember last 1000 commands
set scrolloff=4                 " Keep at least 4 lines below cursor
set autowrite                   " Write for me when I take any action
set relativenumber              " Combined with number; line number preference
set clipboard=unnamed           " Copy/paste in vi with Sierra OS
set number
set nowrap
set showmode
set tw=80
set smartcase
set smarttab
set smartindent
set autoindent
set softtabstop=2
set shiftwidth=2
set expandtab
set incsearch
set mouse=a
set completeopt=menuone,menu,longest
set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git,.cabal-sandbox
set wildmode=longest,list,full
set wildmenu
set completeopt+=longest
set t_Co=256
set cmdheight=1

" Quick escape q to exit a help file
" <buffer> means applies to current buffer only
autocmd Filetype help nmap <buffer> q :q<CR>

" Whitespace removal and application with :W
fun! TrimWhitespace()
    let l:save_cursor = getpos('.')
    %s/\s\+$//e
    call setpos('.', l:save_cursor)
endfun
" The command to access it :TrimWhitespace
command! -bar TrimWhitespace call TrimWhitespace()
" :W to execute the TrimWhitespace when saving the file
command! W TrimWhitespace | w

" Lift the active window when I scroll to the bottom of the file
function! NoScrollAtEOF()
  let curpos = getpos('.')
  let lnum = get(curpos, 1, -1)
  let len = line('$')
  if lnum + winheight(0) >= len
    normal! zb
  endif
endfunction
" the key binding to call the function
nnoremap <c-f> <c-f>:call NoScrollAtEOF()<cr>


" Display and quit with  NerdTree
map <C-n> :NERDTreeToggle<CR>
" Quit vim when NerdTree is the only tab open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Complement use of search file CtrIP
" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0
let g:ackprg = 'ag --nogroup --nocolor --column'   "silver_search

" Color coding line numbers
" NOTE: this is configured by haskell-vim-now
"       It's unclear if the full rc file is reloaded
"       without restarting vim...
highlight LineNr ctermfg=250
highlight Comment ctermfg=122
highlight Function ctermfg=133
" clternative ctermbg=157
