" -------------------------------------------------------------------------------
" ~/.config/nvim/nvim-haskell-extras.vim
" last updated: Apr 19, 2018
"
" source: https://github.com/neovimhaskell and others
" -------------------------------------------------------------------------------

augroup haskell
  au!
  " Resolve ghcmod base directory
  au FileType haskell let g:ghcmod_use_basedir = getcwd()

  " haskell-vim
  " ===========
  " Use hindent instead of par for haskell buffers
  " g:haskell_indent_disable=1  " disable what often gets in my way
  au FileType haskell set formatprg="hindent --tab-size 2 -XQuasiQuotes"

  " Ctags-hasktags generated by codex (see ~/.codex for details)
  au FileType haskell set tags+=codex.tags;

  " Turn on cscope (separate from tags)
  " Calling :tag or CTRL-] will now include both tag and cscope tags
  " TESTING comment out to separate tags from cscope
  " au FileType haskell set cst
  " Connect to hscope.out
  au BufEnter /*.hs :call LoadHscope()

  " change indentLine colorscheme to increase visibility of concealed chars
  " TODO: can this setting work locally?
  au FileType haskell let g:indentLine_color_term=192
  au FileType haskell let g:indentLine_color_gui='#CAE982'
  " au BufEnter hi! link Conceal Function

  " Linting and auto-completion
  " This is set using deoplete... Testing turning it off to solve dups
  " au FileType haskell setlocal omnifunc=necoghc#omnifunc

  " Key bindings
  au FileType haskell nnoremap <silent> <leader><cr> :noh<cr>:GhcModTypeClear<cr>
  au FileType haskell nnoremap <leader>tg :!codex update --force<CR>:call system("git-hscope -X TemplateHaskell")<CR><CR>:call LoadHscope()<CR>
augroup END

let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords<Paste>

" TESTING: I'm using hindent. May want to disable it...
let g:haskell_indent_if = 3
  " if bool
  " >>>then ...
  " >>>else ...
let g:haskell_indent_case = 2
  " case xs of
  " >>[]     -> ...
  " >>(y:ys) -> ...
let g:haskell_indent_let = 4
  " let x = 0 in
  " >>>>x
let g:haskell_indent_where = 6
  " where f :: Int -> Int
  " >>>>>>f x = x
let g:haskell_indent_before_where = 2
  " foo
  " >>where
let g:haskell_indent_after_bare_where = 2
  " where
  " >>foo
let g:haskell_indent_do = 3
  " do x <- a
  " >>>y <- b
let g:haskell_indent_in = 1
  " let x = 1
  " >in x
let g:haskell_indent_guard = 2
  " f x y
  " >>|
let g:haskell_indent_case_alternative = 1
  " f xs ys = case xs of
  " >>[]     -> ...
  " >>(y:ys) -> ...
let g:cabal_indent_section = 2  " max 4
 " executable name
 " >>main-is:             Main.hs
