" -------------------------------------------------------------------------------
" ~/.config/nvim/nvim-haskell-extras.vim
" last updated: Mar 26, 2020
"
" source: https://github.com/neovimhaskell and others
" -------------------------------------------------------------------------------

"" stack bin path
" let haskell_config_dir = $HOME
" let haskell_stack_bin = expand(resolve(haskell_config_dir . "/.stack-bin"))
" let haskell_stack_bin = expand(resolve(haskell_config_dir . "/.local/bin"))
" let $PATH = $PATH . expand(haskell_stack_bin) . ':'

augroup haskell
  au!
  " Resolve ghcmod base directory
  " au FileType haskell let g:ghcmod_use_basedir = getcwd()

  " haskell-vim
  " ===========
  " disable what often gets in my way
  au FileType haskell let b:autoformat_autoindent=0
  au FileType haskell set formatprg=stylish-haskell
  " au FileType haskell set formatprg="hindent --tab-size 2 -XQuasiQuotes"
  " setlocal formatprg=hindent

  " Ctags-hasktags generated by codex (see ~/.codex for details)
  au FileType haskell set tags+=codex.tags;

  " Must be set when first loaded
  au FileType haskell set csprg=hscope   " cscope for haskell
  au FileType haskell set cscoperelative " this generates a full path

  au FileType haskell nnoremap <silent> <leader>hz :HoogleClose<CR>
  " Turn on cscope (separate from tags)
  " Calling :tag or CTRL-] will now include both tag and cscope tags
  " TESTING comment out to separate tags from cscope
  " au FileType haskell set cst
  " Connect to hscope.out
  au BufEnter /*.hs :call LoadHscope()

  " change indentLine colorscheme to increase visibility of concealed chars
  " TODO: can this setting work locally?
  au FileType haskell let g:indentLine_color_term=192
  au FileType haskell let g:indentLine_color_gui='#CAE982'
  " au BufEnter hi! link Conceal Function

  " Linting and auto-completion

  " Key bindings
  " au FileType haskell nnoremap <silent> <leader><cr> :noh<cr>:GhcModTypeClear<cr>
  au FileType haskell nnoremap <leader>tg :!codex update --force<CR>:call system("git-hscope -X TemplateHaskell")<CR><CR>:call LoadHscope()<CR>

augroup END

let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords<Paste>


" Pretty unicode haskell symbols
let g:haskell_conceal_wide = 1
let g:haskell_conceal_enumerations = 1
let hscoptions="𝐒𝐓𝐄𝐌xRtB𝔻w"

let g:tagbar_type_haskell = {
      \ 'ctagsbin'  : 'hasktags',
      \ 'ctagsargs' : '-x -c -o-',
      \ 'kinds'     : [
      \  'm:modules:0:1',
      \  'd:data: 0:1',
      \  'd_gadt: data gadt:0:1',
      \  't:type names:0:1',
      \  'nt:new types:0:1',
      \  'c:classes:0:1',
      \  'cons:constructors:1:1',
      \  'c_gadt:constructor gadt:1:1',
      \  'c_a:constructor accessors:1:1',
      \  'ft:function types:1:1',
      \  'fi:function implementations:0:1',
      \  'o:others:0:1'
      \ ],
      \ 'sro'        : '.',
      \ 'kind2scope' : {
      \ 'm' : 'module',
      \ 'c' : 'class',
      \ 'd' : 'data',
      \ 't' : 'type'
      \ },
      \ 'scope2kind' : {
      \ 'module' : 'm',
      \ 'class'  : 'c',
      \ 'data'   : 'd',
      \ 'type'   : 't'
      \ }
      \ }

if executable('lushtags')
  let g:tagbar_type_haskell = {
        \ 'ctagsbin' : 'lushtags',
        \ 'ctagsargs' : '--ignore-parse-error --',
        \ 'kinds' : [
        \ 'm:module:0',
        \ 'e:exports:1',
        \ 'i:imports:1',
        \ 't:declarations:0',
        \ 'F:fields:1',
        \ 'd:declarations:1',
        \ 'n:declarations:1',
        \ 'f:functions:0',
        \ 'c:constructors:0'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
        \ 'd' : 'data',
        \ 'n' : 'newtype',
        \ 'c' : 'constructor',
        \ 't' : 'type',
        \ 'F' : 'field'
        \ },
        \ 'scope2kind' : {
        \ 'data' : 'd',
        \ 'newtype' : 'n',
        \ 'constructor' : 'c',
        \ 'type' : 't',
        \ 'field' : 'F'
        \ }
        \ }
endif

" Enable some tabular presets for Haskell
let g:haskell_tabular = 1

func! Pointfree()
  call setline('.', split(system('pointfree '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
endfunc

func! Pointful()
  call setline('.', split(system('pointful '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
endfunc

" TESTING: I'm using hindent. May want to disable it...
let g:haskell_indent_if = 3
" if bool
" >>>then ...
" >>>else ...
let g:haskell_indent_case = 2
" case xs of
" >>[]     -> ...
" >>(y:ys) -> ...
let g:haskell_indent_let = 4
" let x = 0 in
" >>>>x
let g:haskell_indent_where = 6
" where f :: Int -> Int
" >>>>>>f x = x
let g:haskell_indent_before_where = 2
" foo
" >>where
let g:haskell_indent_after_bare_where = 2
" where
" >>foo
let g:haskell_indent_do = 3
" do x <- a
" >>>y <- b
let g:haskell_indent_in = 1
" let x = 1
" >in x
let g:haskell_indent_guard = 2
" f x y
" >>|
let g:haskell_indent_case_alternative = 1
" f xs ys = case xs of
" >>[]     -> ...
" >>(y:ys) -> ...
let g:cabal_indent_section = 2  " max 4
" executable name
" >>main-is:             Main.hs
